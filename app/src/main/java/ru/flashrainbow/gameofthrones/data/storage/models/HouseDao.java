package ru.flashrainbow.gameofthrones.data.storage.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Houses".
*/
public class HouseDao extends AbstractDao<House, Long> {

    public static final String TABLENAME = "Houses";

    /**
     * Properties of entity House.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Region = new Property(3, String.class, "region", false, "REGION");
        public final static Property CoatOfArms = new Property(4, String.class, "coatOfArms", false, "COAT_OF_ARMS");
        public final static Property Words = new Property(5, String.class, "words", false, "WORDS");
        public final static Property Titles = new Property(6, String.class, "titles", false, "TITLES");
        public final static Property Seats = new Property(7, String.class, "seats", false, "SEATS");
        public final static Property CurrentLord = new Property(8, String.class, "currentLord", false, "CURRENT_LORD");
    }

    private DaoSession daoSession;


    public HouseDao(DaoConfig config) {
        super(config);
    }
    
    public HouseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Houses\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"URL\" TEXT NOT NULL UNIQUE ," + // 1: url
                "\"NAME\" TEXT," + // 2: name
                "\"REGION\" TEXT," + // 3: region
                "\"COAT_OF_ARMS\" TEXT," + // 4: coatOfArms
                "\"WORDS\" TEXT," + // 5: words
                "\"TITLES\" TEXT," + // 6: titles
                "\"SEATS\" TEXT," + // 7: seats
                "\"CURRENT_LORD\" TEXT);"); // 8: currentLord
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Houses\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, House entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUrl());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(4, region);
        }
 
        String coatOfArms = entity.getCoatOfArms();
        if (coatOfArms != null) {
            stmt.bindString(5, coatOfArms);
        }
 
        String words = entity.getWords();
        if (words != null) {
            stmt.bindString(6, words);
        }
 
        String titles = entity.getTitles();
        if (titles != null) {
            stmt.bindString(7, titles);
        }
 
        String seats = entity.getSeats();
        if (seats != null) {
            stmt.bindString(8, seats);
        }
 
        String currentLord = entity.getCurrentLord();
        if (currentLord != null) {
            stmt.bindString(9, currentLord);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, House entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUrl());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(4, region);
        }
 
        String coatOfArms = entity.getCoatOfArms();
        if (coatOfArms != null) {
            stmt.bindString(5, coatOfArms);
        }
 
        String words = entity.getWords();
        if (words != null) {
            stmt.bindString(6, words);
        }
 
        String titles = entity.getTitles();
        if (titles != null) {
            stmt.bindString(7, titles);
        }
 
        String seats = entity.getSeats();
        if (seats != null) {
            stmt.bindString(8, seats);
        }
 
        String currentLord = entity.getCurrentLord();
        if (currentLord != null) {
            stmt.bindString(9, currentLord);
        }
    }

    @Override
    protected final void attachEntity(House entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public House readEntity(Cursor cursor, int offset) {
        House entity = new House( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // region
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coatOfArms
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // words
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // titles
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // seats
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // currentLord
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, House entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRegion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoatOfArms(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWords(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitles(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSeats(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCurrentLord(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(House entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(House entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(House entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
